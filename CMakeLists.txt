cmake_minimum_required(VERSION 3.2)
project(cage-examples CXX)

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/externals/cage/cmake)
include(cage_all)
cage_default_init()
cage_directory_link("${CMAKE_CURRENT_SOURCE_DIR}/data/cage-tests" "${CMAKE_BINARY_DIR}/result/data/cage-tests")
cage_directory_link("${CMAKE_CURRENT_SOURCE_DIR}/data/scenes-maps" "${CMAKE_BINARY_DIR}/result/scenes-maps")
cage_directory_link("${CMAKE_CURRENT_SOURCE_DIR}/data/scenes-data" "${CMAKE_BINARY_DIR}/result/data/scenes")

add_subdirectory(externals/cage)

message(STATUS "----------------------------------------------------------------")
message(STATUS "scenes")
message(STATUS "----------------------------------------------------------------")

file(GLOB_RECURSE scenes-sources "sources/scenes/*")
add_executable(scenes ${scenes-sources})
target_link_libraries(scenes cage-client)
cage_ide_category(scenes scenes)
cage_ide_working_dir_in_place(scenes)

message(STATUS "----------------------------------------------------------------")
message(STATUS "cage-tests")
message(STATUS "----------------------------------------------------------------")

macro(cage_tests category folder)
	string(LENGTH "${CMAKE_CURRENT_SOURCE_DIR}/${folder}" folderLength)
	file(GLOB cage-tests-source-list "${folder}/*.cpp" "${folder}/*/*.cpp")
	file(GLOB cage-tests-header-list "${folder}/*.h")
	foreach(test ${cage-tests-source-list})
		string(LENGTH ${test} testLength)
		get_filename_component(name ${test} NAME)
		string(LENGTH ${name} nameLength)
		string(REPLACE ".cpp" "" name ${name})
		add_executable(${name} ${test} ${cage-tests-header-list})
		target_link_libraries(${name} cage-client)
		math(EXPR subcategoryLength ${testLength}-${folderLength}-${nameLength}-1)
		string(SUBSTRING ${test} ${folderLength} ${subcategoryLength} subcategory)
		cage_ide_category(${name} ${category}/${subcategory})
		cage_ide_working_dir_in_place(${name})
	endforeach()
endmacro()

cage_tests(client "sources/client")
cage_tests(gui "sources/gui")
cage_tests(engine "sources/engine")
